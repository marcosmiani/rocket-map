{"version":3,"sources":["Map/index.tsx","Map/state.ts","Search/state.ts","utils.ts","store.ts","Search/index.tsx","Details/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StatusMap","StatusOverlay","styled","div","LoadingMessage","ErrorMessage","StyledMarker","Marker","MainMap","ComposableMap","MarkerPoint","marker","onSelect","name","coordinates","onClick","r","fill","stroke","strokeWidth","MapChart","points","useSelector","state","map","locations","items","loading","error","data-testid","zoom","geography","geographies","geo","rsmKey","parseToString","date","format","parse","DATE_FORMAT","Date","getDefaultFrom","getDefaultTo","add","months","from","createSlice","initialState","reducers","set","action","payload","fromActions","actions","to","toActions","combineReducers","reducer","checkStatus","response","status","Error","statusText","parseJSON","json","searchLaunches","createAsyncThunk","params","thunkAPI","a","getState","search","fetch","URI","method","then","slice","extraReducers","rejected","pending","fulfilled","launches","launch","markerOffset","netstamp","agencies","location","pads","id","latitude","longitude","Header","header","Dates","DateInput","input","Button","button","SearchForm","dispatch","useDispatch","type","value","max","onChange","e","target","min","disabled","Name","Agencies","Agency","MarkerDetail","Details","markerDetails","agency","store","configureStore","Wrapper","App","useState","setShowMarkerDetails","Search","Map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a491938.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  ZoomableGroup\n} from 'react-simple-maps';\nimport { useSelector } from 'react-redux'\nimport { CustomMarker } from './state'\nimport { RootState } from '../store'\nimport styled from \"styled-components\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\ninterface MarkerPointProps {\n  marker: CustomMarker\n  onSelect: Function\n}\n\n\nconst StatusOverlay = styled.div`\n  cursor: wait;\n  background-color: rgba(0, 0, 0, 0.5);\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst LoadingMessage = styled.div`\n  color: white;\n  font-size: 16px;\n`\nconst ErrorMessage = styled.div`\n  color: red;\n  font-size: 16px;\n`\n\nconst StyledMarker = styled(Marker)`\n  cursor: pointer;\n`\n\nconst MainMap = styled(ComposableMap)`\n  margin-top: 100px;\n  max-height: calc(100vh - 200px);\n`\n\nconst MarkerPoint = ({marker, onSelect}: MarkerPointProps) => {\n  const { name, coordinates } = marker\n\n  return (\n    <StyledMarker\n      key={name}\n      coordinates={coordinates}\n      onClick={() => onSelect(marker)}\n    >\n      <circle r={4} fill=\"#F00\" stroke=\"#fff\" strokeWidth={2} />\n    </StyledMarker>\n  )\n}\n\nconst MapChart = ({ onSelect }: { onSelect: Function }) => {\n  const points: Array<CustomMarker> = useSelector((state: RootState) => state.map.locations.items)\n  const loading: boolean = useSelector((state: RootState) => state.map.locations.loading)\n  const error: string = useSelector((state: RootState) => state.map.locations.error)\n\n  return (\n    <>\n      <MainMap data-testid='map'>\n        <ZoomableGroup zoom={1}>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies\n                .map(geo => (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    fill=\"#EAEAEC\"\n                    stroke=\"#D6D6DA\"\n                  />\n                ))\n            }\n          </Geographies>\n          {!loading && !error && points.map((marker) => (\n            <MarkerPoint\n            key={marker.name}\n            marker={marker}\n            onSelect={onSelect}\n            />\n          ))}\n        </ZoomableGroup>\n      </MainMap>\n      {(loading || error) && (\n        <StatusOverlay>\n          {loading && (\n            <LoadingMessage>\n              Loading data...\n            </LoadingMessage>\n          )}\n          {error && (\n            <ErrorMessage>\n              {error}\n            </ErrorMessage>\n          )}\n        </StatusOverlay>\n      )}\n    </>\n  );\n};\n\nexport default MapChart;\n","import { createSlice, combineReducers, createAsyncThunk } from '@reduxjs/toolkit'\nimport { fetch } from 'whatwg-fetch'\nimport URI from 'urijs'\nimport { checkStatus, parseJSON } from '../utils'\nimport { RootState, ThunkAPI, DATE_FORMAT } from '../store'\nimport { getDefaultFrom, getDefaultTo } from '../Search/state'\nimport { format } from 'date-fns'\n\nenum StatusMap {\n  // (1 Green, 2 Red, 3 Success, 4 Failed)\n  GREEN = 1,\n  RED = 2,\n  SUCCESS = 3,\n  FAILED = 4\n}\n\nexport interface CustomMarker {\n  name: string;\n  coordinates: [number, number]\n  status: StatusMap\n  date: string,\n  agencies: [{ id: number, name: string }]\n}\n\nexport interface Launch {\n  name: string;\n  coordinates: [number, number]\n  status: number, // (1 Green, 2 Red, 3 Success, 4 Failed)\n  netstamp: number,\n  location: {\n    pads: [\n      {\n        agencies: [\n          {\n            id: number,\n            name: string\n          }\n        ],\n        latitude: number,\n        longitude: number,\n      }\n    ]\n  }\n}\n\n// SEARCH\nexport const searchLaunches: any = createAsyncThunk(\n  `map/locations_by_date`,\n  async (params, thunkAPI: ThunkAPI) => {\n    const state: RootState = thunkAPI.getState()\n    const { search: { from, to } } = state\n\n    return fetch(\n      URI(`https://launchlibrary.net/1.3/launch/${from || getDefaultFrom()}/${to || getDefaultTo()}`),\n      {\n        method: 'GET'\n      }\n    )\n      .then(checkStatus)\n      .then(parseJSON)\n  })\n\nconst slice =  createSlice({\n  name: `map_locations`,\n  initialState: { items: [], loading: false, error: '' },\n  reducers: {\n    // standard reducer logic, with auto-generated action types per reducer\n  },\n  extraReducers: {\n    // Add reducers for additional action types here, and handle loading state as needed\n    [searchLaunches.rejected]: (state, action) => {\n      // Add user to the state array\n      state.loading = false\n      state.error = `${action.payload}`\n    },\n    [searchLaunches.pending]: (state, action) => {\n      // Add user to the state array\n      state.loading = true\n      state.error = ''\n    },\n    [searchLaunches.fulfilled]: (state, action) => {\n      state.loading = false\n      state.error = ''\n      // Add payload to the state array\n      state.items = action.payload.launches.map((launch: Launch) => {\n        return {\n          markerOffset: -15,\n          name: launch.name,\n          status: StatusMap[launch.status], // (1 Green, 2 Red, 3 Success, 4 Failed)\n          date: format(new Date(launch.netstamp), DATE_FORMAT),\n          agencies: (launch.location.pads[0].agencies || []).map(({ id, name }) => ({ id, name })),\n          coordinates: [launch.location.pads[0].latitude, launch.location.pads[0].longitude]\n        }\n      })\n    }\n  }\n})\n\n\nexport default combineReducers({\n  locations: slice.reducer\n})\n","import { createSlice, combineReducers } from '@reduxjs/toolkit'\nimport {format, parse, add} from 'date-fns';\nimport { DATE_FORMAT } from '../store'\n\nconst parseToString = (date: string): string => format(\n  parse(date, DATE_FORMAT, new Date()),\n  DATE_FORMAT\n)\n\nexport const getDefaultFrom = () => format(new Date(), DATE_FORMAT)\nexport const getDefaultTo = () => format(add(new Date(), { months: 3 }), DATE_FORMAT)\n\nconst from = createSlice({\n  name: 'search/from',\n  initialState: '',\n  reducers: {\n    set: (state, action) => parseToString(action.payload),\n  }\n})\n\nexport const fromActions = from.actions\n\nexport const to = createSlice({\n  name: 'search/to',\n  initialState: '',\n  reducers: {\n    set: (state, action) => parseToString(action.payload),\n  }\n})\n\nexport const toActions = from.actions\n\nexport default combineReducers({\n  from: from.reducer,\n  to: to.reducer,\n})\n","\ninterface BasicHTTPResponse {\n  status: number;\n  statusText: string;\n  json: Function\n}\n\n// UTILITY FUNCTIONS\nexport function checkStatus (response: BasicHTTPResponse) {\n  if (response.status >= 200 && response.status < 300) {\n    return response\n  } else {\n    const error = new Error(response.statusText)\n    throw error\n  }\n}\n\nexport function parseJSON (response: BasicHTTPResponse) {\n  return response.json()\n}\n","import { configureStore, combineReducers } from '@reduxjs/toolkit'\nimport search from './Search/state'\nimport map, { CustomMarker } from './Map/state'\n\nexport const DATE_FORMAT = 'yyyy-MM-dd';\n\nexport interface RootState {\n  search: {\n    from: string,\n    to: string\n  }\n  map: {\n    locations: {\n      items: Array<CustomMarker>\n      loading: boolean\n      error: string\n    }\n  }\n}\n\nexport interface ThunkAPI {\n  getState: Function\n}\n\nexport function createStore () {\n  // Create a store with the root reducer function being the one exposed by the manager.\n  const store = configureStore({\n    reducer: combineReducers({ search, map })\n  })\n\n  return store\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { searchLaunches } from '../Map/state';\nimport { RootState } from '../store'\nimport { fromActions, toActions, getDefaultFrom, getDefaultTo } from './state'\n\nconst Header = styled.header`\n  position: fixed;\n  top: 10px;\n  left: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n  border-radius: 2px;\n`\n\nconst Dates = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n`\n\nconst DateInput = styled.input`\n  margin: 0 4px;\n  height: 25px;\n  font-size: 16px;\n  width: 180px;\n`\n\nconst Button = styled.button`\n  height: 30px;\n  background-color: darkgreen;\n  border: 0;\n  border-radius: 2px;\n  color: white;\n  font-size: 16px;\n  padding: 0 16px;\n  margin: 16px 0;\n\n  &:disabled {\n    background-color: darkgray;\n  }\n`\n\nfunction SearchForm() {\n  const dispatch = useDispatch()\n  const loading: boolean = useSelector((state: RootState) => state.map.locations.loading)\n  const from: string = useSelector((state: RootState) => state.search.from)\n  const to: string = useSelector((state: RootState) => state.search.to)\n\n  return (\n    <Header>\n      <Dates>\n        <DateInput\n          data-testid='date-from'\n          name=\"date-from\"\n          type=\"date\"\n          value={from || getDefaultFrom()}\n          max={to}\n          onChange={(e) => dispatch(fromActions.set(e.target.value))}\n        />\n        -\n        <DateInput\n          type=\"date\"\n          name=\"date-to\"\n          data-testid=\"date-to\"\n          value={to || getDefaultTo()}\n          min={from}\n          onChange={(e) => dispatch(toActions.set(e.target.value))}\n        />\n      </Dates>\n      <Button data-testid='search-button' disabled={loading} onClick={() => dispatch(searchLaunches()) }>\n        Search\n      </Button>\n    </Header>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\nimport styled from 'styled-components';\nimport { CustomMarker } from '../Map/state'\n\nconst Name = styled.div`\n  display: block;\n  font-weight: 800;\n  padding-bottom: 8px;\n`\n\nconst Agencies = styled.div`\n  display: block;\n`\n\nconst Agency = styled.div`\n  display: block;\n  padding-left: 16px;\n`\n\nconst MarkerDetail = styled.div`\n  position: fixed;\n  bottom: 10px;\n  right: 10px;\n  background-color: white;\n  color: black;\n  min-width: 150px;\n  min-height: 50px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  padding: 16px;\n  border-radius: 4px;\n`\n\nfunction Details({ markerDetails }: {markerDetails: CustomMarker}) {\n  return (\n    <MarkerDetail>\n      <Name>{markerDetails.name}</Name>\n      <Agencies>\n        Agencies:\n        {markerDetails.agencies.map((agency: {id: number, name: string}) => (\n          <Agency key={agency.id}>{agency.name}</Agency>\n        ))}\n      </Agencies>\n    </MarkerDetail>\n  );\n}\n\nexport default Details;\n","import React, { useState } from \"react\";\nimport MapChart from \"./Map\";\n\nimport styled from 'styled-components';\nimport { Provider } from 'react-redux';\nimport { createStore } from './store';\nimport { CustomMarker } from './Map/state'\nimport SearchForm from './Search';\nimport MarkerDetail from './Details';\n\nconst store = createStore()\n\nconst Wrapper = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: #282c34;\n  overflow: hidden;\n`\n\n\nfunction App() {\n  const [markerDetails, setShowMarkerDetails] = useState<CustomMarker | null>(null)\n\n  return (\n    <Provider store={store}>\n      <Wrapper>\n        <SearchForm />\n        <MapChart onSelect={setShowMarkerDetails} />\n        {markerDetails && < MarkerDetail markerDetails={markerDetails} />}\n      </Wrapper>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}